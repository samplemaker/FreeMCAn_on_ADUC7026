if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME aduc702x
}

if { [info exists ENDIAN] } {
   set  _ENDIAN $ENDIAN
} else {
  # This config file was defaulting to big endian..
   set  _ENDIAN little
}

if { [info exists CPUTAPID] } {
   set  _CPUTAPID $CPUTAPID
} else {
   set  _CPUTAPID 0x3f0f0f0f
}

#should be 1/6 coreclock [kHz]
#jtag_rclk 7000
#jtag_khz 7000
jtag_rclk 1000
jtag_khz 1000

## Target reset
# There are two different ways to reset the target:
# Issuing a soft reset (monitor soft_reset_halt) which makes nothing but
# $PC = 0x0. Or performing a hard reset (system reset which resets
# everything). The problem with the hard reset is that it is not
# wired on our board. If you want to hard reset and halt the target
# on the entry point a workaround would be as follows:
# 1.) start OPENOCD and the debugger and keep the target running
# 2.) press the reset button on the board (SRST) and keep the button pressed down
# 3.) in the debugger perform a "monitor reset halt" which initializes
#     the JTAG
# 4.) immediately after the JTAG is initialized release the SRST
jtag_nsrst_delay 200
jtag_ntrst_delay 200
adapter_nsrst_delay 200
reset_config trst_and_srst srst_pulls_trst

## JTAG scan chain
#format L IRC IRCM IDCODE (Length, IR Capture, IR Capture Mask, IDCODE)
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

##
## Target configuration
##
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME

# allocate the entire SRAM as working area
$_TARGETNAME configure -work-area-phys 0x10000 -work-area-size 0x2000

## flash configuration
# only target number is needed
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME aduc702x 0 0 0 0 $_TARGETNAME


proc flash_load {file} {
     soft_reset_halt
     poll off
     flash write_image erase $file 0x00080000 bin
     poll on
}

proc flash_erase {} {
     soft_reset_halt
     poll off
     flash erase_sector 0 0 123
     sleep 500
     poll on
}

proc flash_dump {} {
     #ADuC7019/ADuC702x Silicon Anomaly List:
     #Access to Flash Address 0x0008F7FF Causes a Data Abort [er022]
     dump_image flash.dump 0x00080000  0x0000f7fe
}
